// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { CreateConfigurationConfigurationPostData, CreateConfigurationConfigurationPostErrors, CreateConfigurationConfigurationPostResponses, DeleteConfigurationConfigurationConfigurationIdDeleteData, DeleteConfigurationConfigurationConfigurationIdDeleteErrors, DeleteConfigurationConfigurationConfigurationIdDeleteResponses, GetConfigurationConfigurationConfigurationIdGetData, GetConfigurationConfigurationConfigurationIdGetErrors, GetConfigurationConfigurationConfigurationIdGetResponses, GetDefaultConfigurationConfigurationDefaultGetData, GetDefaultConfigurationConfigurationDefaultGetResponses, ListConfigurationsConfigurationGetData, ListConfigurationsConfigurationGetResponses, RootGetData, RootGetResponses, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchErrors, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchResponses, UpdateConfigurationConfigurationConfigurationIdPutData, UpdateConfigurationConfigurationConfigurationIdPutErrors, UpdateConfigurationConfigurationConfigurationIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Configurations
 *
 * List all configurations.
 */
export const listConfigurationsConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<ListConfigurationsConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListConfigurationsConfigurationGetResponses, unknown, ThrowOnError>({
        url: '/configuration/',
        ...options
    });
};

/**
 * Create Configuration
 *
 * Create a new configuration.
 */
export const createConfigurationConfigurationPost = <ThrowOnError extends boolean = false>(options: Options<CreateConfigurationConfigurationPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateConfigurationConfigurationPostResponses, CreateConfigurationConfigurationPostErrors, ThrowOnError>({
        url: '/configuration/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Configuration
 *
 * Delete a configuration by ID.
 */
export const deleteConfigurationConfigurationConfigurationIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteConfigurationConfigurationConfigurationIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteConfigurationConfigurationConfigurationIdDeleteResponses, DeleteConfigurationConfigurationConfigurationIdDeleteErrors, ThrowOnError>({
        url: '/configuration/{configuration_id}/',
        ...options
    });
};

/**
 * Get Configuration
 *
 * Get a configuration by ID.
 */
export const getConfigurationConfigurationConfigurationIdGet = <ThrowOnError extends boolean = false>(options: Options<GetConfigurationConfigurationConfigurationIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetConfigurationConfigurationConfigurationIdGetResponses, GetConfigurationConfigurationConfigurationIdGetErrors, ThrowOnError>({
        url: '/configuration/{configuration_id}/',
        ...options
    });
};

/**
 * Update Configuration
 *
 * Update a configuration by ID.
 */
export const updateConfigurationConfigurationConfigurationIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateConfigurationConfigurationConfigurationIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateConfigurationConfigurationConfigurationIdPutResponses, UpdateConfigurationConfigurationConfigurationIdPutErrors, ThrowOnError>({
        url: '/configuration/{configuration_id}/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Default Configuration
 *
 * Get the default configuration.
 */
export const getDefaultConfigurationConfigurationDefaultGet = <ThrowOnError extends boolean = false>(options?: Options<GetDefaultConfigurationConfigurationDefaultGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDefaultConfigurationConfigurationDefaultGetResponses, unknown, ThrowOnError>({
        url: '/configuration/default/',
        ...options
    });
};

/**
 * Set Default Configuration
 *
 * Set a configuration as the default one.
 */
export const setDefaultConfigurationConfigurationConfigurationIdDefaultPatch = <ThrowOnError extends boolean = false>(options: Options<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchResponses, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchErrors, ThrowOnError>({
        url: '/configuration/{configuration_id}/default/',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
