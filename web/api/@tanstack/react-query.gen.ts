// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { createConfigurationConfigurationPost, deleteConfigurationConfigurationConfigurationIdDelete, getConfigurationConfigurationConfigurationIdGet, getDefaultConfigurationConfigurationDefaultGet, listConfigurationsConfigurationGet, type Options, rootGet, setDefaultConfigurationConfigurationConfigurationIdDefaultPatch, updateConfigurationConfigurationConfigurationIdPut } from '../sdk.gen';
import type { CreateConfigurationConfigurationPostData, CreateConfigurationConfigurationPostError, CreateConfigurationConfigurationPostResponse, DeleteConfigurationConfigurationConfigurationIdDeleteData, DeleteConfigurationConfigurationConfigurationIdDeleteError, DeleteConfigurationConfigurationConfigurationIdDeleteResponse, GetConfigurationConfigurationConfigurationIdGetData, GetDefaultConfigurationConfigurationDefaultGetData, ListConfigurationsConfigurationGetData, RootGetData, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchError, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchResponse, UpdateConfigurationConfigurationConfigurationIdPutData, UpdateConfigurationConfigurationConfigurationIdPutError, UpdateConfigurationConfigurationConfigurationIdPutResponse } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const listConfigurationsConfigurationGetQueryKey = (options?: Options<ListConfigurationsConfigurationGetData>) => createQueryKey('listConfigurationsConfigurationGet', options);

/**
 * List Configurations
 *
 * List all configurations.
 */
export const listConfigurationsConfigurationGetOptions = (options?: Options<ListConfigurationsConfigurationGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listConfigurationsConfigurationGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listConfigurationsConfigurationGetQueryKey(options)
    });
};

/**
 * Create Configuration
 *
 * Create a new configuration.
 */
export const createConfigurationConfigurationPostMutation = (options?: Partial<Options<CreateConfigurationConfigurationPostData>>): UseMutationOptions<CreateConfigurationConfigurationPostResponse, CreateConfigurationConfigurationPostError, Options<CreateConfigurationConfigurationPostData>> => {
    const mutationOptions: UseMutationOptions<CreateConfigurationConfigurationPostResponse, CreateConfigurationConfigurationPostError, Options<CreateConfigurationConfigurationPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createConfigurationConfigurationPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Configuration
 *
 * Delete a configuration by ID.
 */
export const deleteConfigurationConfigurationConfigurationIdDeleteMutation = (options?: Partial<Options<DeleteConfigurationConfigurationConfigurationIdDeleteData>>): UseMutationOptions<DeleteConfigurationConfigurationConfigurationIdDeleteResponse, DeleteConfigurationConfigurationConfigurationIdDeleteError, Options<DeleteConfigurationConfigurationConfigurationIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteConfigurationConfigurationConfigurationIdDeleteResponse, DeleteConfigurationConfigurationConfigurationIdDeleteError, Options<DeleteConfigurationConfigurationConfigurationIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteConfigurationConfigurationConfigurationIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigurationConfigurationConfigurationIdGetQueryKey = (options: Options<GetConfigurationConfigurationConfigurationIdGetData>) => createQueryKey('getConfigurationConfigurationConfigurationIdGet', options);

/**
 * Get Configuration
 *
 * Get a configuration by ID.
 */
export const getConfigurationConfigurationConfigurationIdGetOptions = (options: Options<GetConfigurationConfigurationConfigurationIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfigurationConfigurationConfigurationIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigurationConfigurationConfigurationIdGetQueryKey(options)
    });
};

/**
 * Update Configuration
 *
 * Update a configuration by ID.
 */
export const updateConfigurationConfigurationConfigurationIdPutMutation = (options?: Partial<Options<UpdateConfigurationConfigurationConfigurationIdPutData>>): UseMutationOptions<UpdateConfigurationConfigurationConfigurationIdPutResponse, UpdateConfigurationConfigurationConfigurationIdPutError, Options<UpdateConfigurationConfigurationConfigurationIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateConfigurationConfigurationConfigurationIdPutResponse, UpdateConfigurationConfigurationConfigurationIdPutError, Options<UpdateConfigurationConfigurationConfigurationIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateConfigurationConfigurationConfigurationIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getDefaultConfigurationConfigurationDefaultGetQueryKey = (options?: Options<GetDefaultConfigurationConfigurationDefaultGetData>) => createQueryKey('getDefaultConfigurationConfigurationDefaultGet', options);

/**
 * Get Default Configuration
 *
 * Get the default configuration.
 */
export const getDefaultConfigurationConfigurationDefaultGetOptions = (options?: Options<GetDefaultConfigurationConfigurationDefaultGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDefaultConfigurationConfigurationDefaultGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDefaultConfigurationConfigurationDefaultGetQueryKey(options)
    });
};

/**
 * Set Default Configuration
 *
 * Set a configuration as the default one.
 */
export const setDefaultConfigurationConfigurationConfigurationIdDefaultPatchMutation = (options?: Partial<Options<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData>>): UseMutationOptions<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchResponse, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchError, Options<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData>> => {
    const mutationOptions: UseMutationOptions<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchResponse, SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchError, Options<SetDefaultConfigurationConfigurationConfigurationIdDefaultPatchData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await setDefaultConfigurationConfigurationConfigurationIdDefaultPatch({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};
